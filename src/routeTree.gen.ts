/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WelcomeRouteImport } from './routes/welcome'
import { Route as UserRouteImport } from './routes/user'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as LoginRouteImport } from './routes/login'
import { Route as InactivatedRouteImport } from './routes/inactivated'
import { Route as ActivateRouteImport } from './routes/activate'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AppsIndexRouteImport } from './routes/apps/index'
import { Route as ResetPasswordStepRouteImport } from './routes/reset-password/$step'
import { Route as AppsIdRouteImport } from './routes/apps/$id'

const WelcomeRoute = WelcomeRouteImport.update({
  id: '/welcome',
  path: '/welcome',
  getParentRoute: () => rootRouteImport,
} as any)
const UserRoute = UserRouteImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const InactivatedRoute = InactivatedRouteImport.update({
  id: '/inactivated',
  path: '/inactivated',
  getParentRoute: () => rootRouteImport,
} as any)
const ActivateRoute = ActivateRouteImport.update({
  id: '/activate',
  path: '/activate',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppsIndexRoute = AppsIndexRouteImport.update({
  id: '/apps/',
  path: '/apps/',
  getParentRoute: () => rootRouteImport,
} as any)
const ResetPasswordStepRoute = ResetPasswordStepRouteImport.update({
  id: '/reset-password/$step',
  path: '/reset-password/$step',
  getParentRoute: () => rootRouteImport,
} as any)
const AppsIdRoute = AppsIdRouteImport.update({
  id: '/apps/$id',
  path: '/apps/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/activate': typeof ActivateRoute
  '/inactivated': typeof InactivatedRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/user': typeof UserRoute
  '/welcome': typeof WelcomeRoute
  '/apps/$id': typeof AppsIdRoute
  '/reset-password/$step': typeof ResetPasswordStepRoute
  '/apps': typeof AppsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/activate': typeof ActivateRoute
  '/inactivated': typeof InactivatedRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/user': typeof UserRoute
  '/welcome': typeof WelcomeRoute
  '/apps/$id': typeof AppsIdRoute
  '/reset-password/$step': typeof ResetPasswordStepRoute
  '/apps': typeof AppsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/activate': typeof ActivateRoute
  '/inactivated': typeof InactivatedRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/user': typeof UserRoute
  '/welcome': typeof WelcomeRoute
  '/apps/$id': typeof AppsIdRoute
  '/reset-password/$step': typeof ResetPasswordStepRoute
  '/apps/': typeof AppsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/activate'
    | '/inactivated'
    | '/login'
    | '/register'
    | '/user'
    | '/welcome'
    | '/apps/$id'
    | '/reset-password/$step'
    | '/apps'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/activate'
    | '/inactivated'
    | '/login'
    | '/register'
    | '/user'
    | '/welcome'
    | '/apps/$id'
    | '/reset-password/$step'
    | '/apps'
  id:
    | '__root__'
    | '/'
    | '/activate'
    | '/inactivated'
    | '/login'
    | '/register'
    | '/user'
    | '/welcome'
    | '/apps/$id'
    | '/reset-password/$step'
    | '/apps/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ActivateRoute: typeof ActivateRoute
  InactivatedRoute: typeof InactivatedRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  UserRoute: typeof UserRoute
  WelcomeRoute: typeof WelcomeRoute
  AppsIdRoute: typeof AppsIdRoute
  ResetPasswordStepRoute: typeof ResetPasswordStepRoute
  AppsIndexRoute: typeof AppsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/welcome': {
      id: '/welcome'
      path: '/welcome'
      fullPath: '/welcome'
      preLoaderRoute: typeof WelcomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/user': {
      id: '/user'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof UserRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/inactivated': {
      id: '/inactivated'
      path: '/inactivated'
      fullPath: '/inactivated'
      preLoaderRoute: typeof InactivatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/activate': {
      id: '/activate'
      path: '/activate'
      fullPath: '/activate'
      preLoaderRoute: typeof ActivateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/apps/': {
      id: '/apps/'
      path: '/apps'
      fullPath: '/apps'
      preLoaderRoute: typeof AppsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/reset-password/$step': {
      id: '/reset-password/$step'
      path: '/reset-password/$step'
      fullPath: '/reset-password/$step'
      preLoaderRoute: typeof ResetPasswordStepRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/apps/$id': {
      id: '/apps/$id'
      path: '/apps/$id'
      fullPath: '/apps/$id'
      preLoaderRoute: typeof AppsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ActivateRoute: ActivateRoute,
  InactivatedRoute: InactivatedRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  UserRoute: UserRoute,
  WelcomeRoute: WelcomeRoute,
  AppsIdRoute: AppsIdRoute,
  ResetPasswordStepRoute: ResetPasswordStepRoute,
  AppsIndexRoute: AppsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
